{
  "name": "WorldRadioStation",
  "description": "## Project Goal\nDesign and develop a fully functional, vintage-themed FM Radio web application contained entirely within a single HTML file.\n\nImportant: The UI must match the provided reference image exactly in layout and behavior: a top title \"Vintage FM Radio\", a small vintage-style text display, an HTML5 audio player, a \"Select a country\" dropdown that opens a full scrollable list of countries, and after selecting a country the 20 radio stations for that country must appear below as clickable items. Clicking any station immediately starts playback and updates the display panel. Include three decorative circular knobs beneath the dropdown as in the reference image.\n\n---\n\n## Absolute Requirements (do not omit)\n1. Countries & Stations\n   - Provide a scrollable list containing *all countries of the world* (or, if file-size is a concern, include an explicit list of at least 50+ major countries). \n   - For each country selected, include 20 real-time working radio station streams (URLs) covering diverse genres (music, news, talk, sports, culture).\n   - The final deliverable must include at least 1000 radio stream entries in total (e.g., 50 countries × 20 stations each = 1000). If 1000 is impractical, include at least 20 major countries × 20 stations = 400 streams.\n   - Provide station metadata: Station Name, City/Region, Genre, Stream URL, Bitrate (if known), and Country code.\n\n2. UI Behavior (match reference image)\n   - Top header: \"Vintage FM Radio\".\n   - Instruction/display bar under header showing messages like \"Select a country to see stations\" or the currently playing station name.\n   - HTML5 audio player beneath the display that plays the chosen stream.\n   - A compact dropdown labeled \"Select a country\" that opens a scrollable list of countries (touch-friendly).\n   - After country selection, show 20 station buttons/list-items beneath the dropdown in a vertically scrollable panel.\n   - Clicking a station immediately sets the audio player's `src` to the station stream and begins playback. The display updates to show Station Name — City — Genre.\n   - Include three circular decorative knobs below the dropdown (purely visual) to match the reference look.\n   - Responsive: mobile-first layout, touch-friendly controls, elements resize appropriately.\n\n3. Technical Constraints\n   - Deliver one single .html file which contains all HTML, CSS, and JS (the audio stream URLs may remain external).\n   - Use only vanilla HTML/CSS/JS (no external libs). Inline all CSS and JS within the HTML file.\n   - The UI (buttons, dropdown, knobs, static images or SVGs used for design) must be available offline (embedded base64 images or CSS/SVG). Only the streaming URLs require internet.\n   - Provide a separate `.txt` prompt file (this file) that documents the full spec and lists the countries and station-count requirement so a developer knows to include the streams.\n\n4. Quality & Testing\n   - Validate that each stream URL is reachable (HTTP 200 or playable audio) and note any that fail.\n   - Code must be well-structured and commented.\n   - Ensure cross-browser compatibility (Chrome, Firefox, Edge, Safari on desktop and mobile).\n\n---\n\n## Global Design & Styling Guidelines\n- Theme: vintage analog radio (wood/fabric speaker grill, analog dials, amber/green display text).\n- Fonts: retro fonts (use embedded webfonts if allowed, otherwise use system fallbacks).\n- Colors: warm wood tones, amber/green display text, soft shadows and subtle glow for selected items.\n- Station list items: classic button/list look with hover and active styles.\n- Audio visual feedback: simple animated speaker grill or VU meter when audio plays.\n\n---\n\n## Final Deliverables\n1. One single `.html` file (offline-playable UI) that implements the complete application.\n2. One `.txt` file (this specification) describing requirements and listing the exact constraint: *include 20 stations per country for the full list of countries selected*.\n3. A README block in the HTML explaining how to update/add station URLs and how to test streams.\n4. An optional JSON file embedded or attached listing all station metadata (if the user prefers).\n\n---\n\n## Testing Notes for the Developer\n- When populating the station list, prefer common streaming endpoints such as direct audio/mp3/aac streams. Avoid pages that require embedded players or heavy CORS restrictions.\n- If a station stream is geo-blocked, note that in the metadata next to the station.\n- Prioritize official station stream URLs from station websites or reputable radio listing services.\n- For performance, lazy-load station metadata when a country is opened (but keep the UI offline-friendly).\n\n---\n\n## User Interaction Flow (Exact)\n1. User opens the page. The header reads \"Vintage FM Radio\" and the display says \"Select a country to see stations\".\n2. User taps/clicks \"Select a country\" — a full list of countries appears (searchable is optional but recommended).\n3. User chooses a country. The display updates to show \"Showing 20 stations for <Country Name>\".\n4. The 20 station items appear immediately below the dropdown. Each item shows Station Name and Genre.\n5. User clicks a station item — audio player sets that stream and playback starts; display updates to show Station Name — City — Genre.\n6. Play/Pause/Mute/Volume controls are available on the player. Decorative knobs remain non-functional but styled as in reference.\n7. The UI works smoothly on mobile and desktop.\n\n---\n\nPlease implement exactly as above. The key missing requirement previously was the explicit instruction to include all countries and 20 streams per country — that is now mandatory in this specification.",
  "requestFramePermissions": []
}